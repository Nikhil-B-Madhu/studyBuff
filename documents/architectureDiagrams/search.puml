@startuml
!theme blueprint
actor       User              as User
participant FrontEnd          as FE
queue       WebSocket         as WS
participant UniversityService as US

queue       Kafka             as KF

participant MLQueryParser     as MLQ
participant MLRecommender     as MLR

database    ElasticSearch     as ES

User -> FE : Search Request (query)
FE -> US : Search Request (query)

note over FE
Activate Loader
end note

activate US
return UUID
FE -> FE : Store UUID in Local Storage

group Message Broker [Messages for fetching Recommendation List]
US -> KF : UUID with Query Message
KF -> MLQ : UUID with Query Message
MLQ -> KF : CourseID with UUID Message
KF -> MLR : CourseID with UUID Message
end

group Message Broker [Recommendation Response]
MLR -> WS : List of CourseIDs and Name with UUID
WS -> FE :  List of CourseIDs and Name with UUID
note left
check if UUID
matches with
Stored UUID
end note
end

note over FE
Terminate Loader and
load Recommendation
end note

note over FE
On Course Selection
end note

FE -> US : Course ID
activate US
US -> ES : Fetch Course Details
ES -> US : Course Details
return Course Details

note over FE
Add Course Details to tabel
end note
@enduml